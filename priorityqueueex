#include <stdio.h>
#include <stdlib.h>

struct Process {
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
};

void fcfs(struct Process processes[], int n) {
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        if (current_time < processes[i].arrival_time) {
            current_time = processes[i].arrival_time;
        }
        processes[i].completion_time = current_time + processes[i].burst_time;
        processes[i].turnaround_time = processes[i].completion_time - processes[i].arrival_time;
        processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
        current_time = processes[i].completion_time + 2; // Fixed I/O waiting time
    }
}

int maâ€¦
#include <stdio.h>
#include <stdlib.h>

struct Process {
    int id;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
};

int findShortestJob(struct Process processes[], int n, int current_time) {
    int shortest = -1;
    int shortest_burst = INT_MAX;
    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].remaining_time < shortest_burst) {
            shortest = i;
            shortest_burst = processes[i].remaining_time;
        }
    }
    return shortest;
}

void sjf(struct Process processes[], int n) {
    int current_time = 0;
    int completed = 0;

    while (completed < n) {
        int shortest = findShortestJob(processes, n, current_time);

        if (shortest == -1) {
            current_time++;
        } else {
            processes[shortest].remaining_time--;
            current_time++;

            if (processes[shortest].remaining_time == 0) {
                completed++;
                processes[shortest].completion_time = current_time;
                processes[shortest].turnaround_time = processes[shortest].completion_time - processes[shortest].arrival_time;
                processes[shortest].waiting_time = processes[shortest].turnaround_time - processes[shortest].burst_time;
            }
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time and initial burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].id = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    sjf(processes, n);

    printf("\nGantt Chart:\n");
    int current_time = 0;
    while (1) {
        int shortest = findShortestJob(processes, n, current_time);
        if (shortest == -1) {
            current_time++;
        } else {
            printf("%d-%d: P%d ", current_time, current_time + 1, processes[shortest].id);
            current_time++;
            processes[shortest].remaining_time--;

            if (processes[shortest].remaining_time == 0) {
                processes[shortest].remaining_time = INT_MAX; // Mark as completed
            }
        }

        int all_completed = 1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time != INT_MAX) {
                all_completed = 0;
                break;
            }
        }

        if (all_completed) {
            break;
        }
    }

    printf("\n\nTurnaround Times:\n");
    double avg_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        printf("P%d: %d ", processes[i].id, processes[i].turnaround_time);
        avg_turnaround_time += processes[i].turnaround_time;
    }
    avg_turnaround_time /= n;

    printf("\n\nWaiting Times:\n");
    double avg_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        printf("P%d: %d ", processes[i].id, processes[i].waiting_time);
        avg_waiting_time += processes[i].waiting_time;
    }
    avg_waiting_time /= n;

    printf("\n\nAverage Turnaround Time: %.2lf\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2lf\n", avg_waiting_time);

    return 0;
}
